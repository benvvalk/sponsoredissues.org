"""
Django settings for sponsoredissues project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from django.core.management.utils import get_random_secret_key
from pathlib import Path
import dj_database_url
import environ
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Read environment variables from `.env` in project root.
env = environ.Env()
env.read_env(BASE_DIR / '.env', parse_comments=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('DJANGO_SECRET_KEY', default=get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DJANGO_DEBUG', default=True)

# `ALLOWED_HOSTS` is a security measure to block "HTTP Host header
# attacks". For further info, see:
# https://docs.djangoproject.com/en/5.2/ref/settings/#allowed-hosts
ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS', default=[])


# Application definition

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'sponsoredissues',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
    'sponsoredissues.middleware.github_autorefresh_token',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'github': {
        'APP': {
            'client_id': env.str('GITHUB_CLIENT_ID', default=None),
            'secret': env.str('GITHUB_CLIENT_SECRET', default=None),
        }
    }
}

# GitHub App configuration for API access
GITHUB_APP_ID = env.str('GITHUB_APP_ID', default=None)
GITHUB_APP_PRIVATE_KEY = env.str('GITHUB_APP_PRIVATE_KEY', default=None)

# GitHub Personal Access Token for GraphQL API access
GITHUB_ACCESS_TOKEN = env.str('GITHUB_ACCESS_TOKEN', default=None)

# GitHub login whitelist for development
# If set, only these GitHub usernames will be allowed to log in.
# All other users will see the custom message defined in GITHUB_LOGIN_DISABLED_MESSAGE.
# Example: ALLOWED_GITHUB_USERS=user1,user2,user3
ALLOWED_GITHUB_USERS = env.list('ALLOWED_GITHUB_USERS', default=[])

# Custom message shown to users who are not in the whitelist
GITHUB_LOGIN_DISABLED_MESSAGE = env.str(
    'GITHUB_LOGIN_DISABLED_MESSAGE',
    default='Sorry, logins on sponsoredissues.org are currently disabled, because the site is still under development. Please come back in a few weeks!'
)

# Disable login with local Django accounts. Only allow "Login with GitHub".
SOCIALACCOUNT_ONLY = True
ACCOUNT_EMAIL_VERIFICATION = "none" # required for `SOCIALACCOUNT_ONLY = True`

# Custom adapter to restrict GitHub logins during development
SOCIALACCOUNT_ADAPTER = 'sponsoredissues.adapters.GitHubAccountAdapter'

# Save user's OAuth access token and refresh token to the database.
#
# We need the access token so that we can issue GraphQL queries on
# behalf of the logged-in user, in order to calculate the total amount
# donated to particular developers. Many details about sponsorships
# (e.g. dollar amounts) are only accessible to the sponsor (donor) and
# maintainer (donee).
SOCIALACCOUNT_STORE_TOKENS = True

ROOT_URLCONF = 'sponsoredissues.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'sponsoredissues' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sponsoredissues.wsgi.application'


# Database settings.
#
# The `dj-database-url` package [1] reads the database connection URL
# from the `DATABASE_URL` environment variable. If `DATABASE_URL` is
# not set, we fallback to using sqlite3 with a `db.sqlite3` file in
# the project root directory. (Django will automatically create the
# `db.sqlite3` file if it doesn't exist.)
#
# Without the `dj-database-url` package, I would need to specify the
# database connection parameters using separate
# `NAME`/`USER`/`PASSWORD`/`HOST`/`PORT` variables, which is rather
# tedious and error-prone.
#
# [1]: https://pypi.org/project/dj-database-url

DATABASES = {
    'default': dj_database_url.config(
        default=f'sqlite:///{BASE_DIR / "db.sqlite3"}'
    ),
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
