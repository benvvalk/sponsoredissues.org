# Run Django in debug mode (i.e. `DEBUG=True`).
#
# This makes Django show detailed debug information (e.g. stack
# traces, environment variables), both in the browser error pages
# and in the Django log.
#
# Setting `DJANGO_DEBUG=True` is helpful during development, but
# generally unsafe to use in production, because exposes too many
# details about the webserver configuration.
DJANGO_DEBUG='True'

# If `DJANGO_SECRET_KEY is not set, a new random secret key will
# be generated every time the webserver is restarted.
#
# The default behaviour works fine, but for local development it is
# helpful to set `DJANGO_SECRET_KEY` to a constant value, so that you
# don't need to re-"Sign in with GitHub" every time you restart the
# webserver.
DJANGO_SECRET_KEY='secret'

# Github App credentials. These are needed for implementing "Sign in
# with GitHub" with `django-allauth`, and for performing GitHub API
# requests on behalf of the GitHub App.
#
# In order for website to function properly (even when running the
# website locally!), you will need to create a GitHub App with default
# permissions, and fill in the credentials below.
#
# When developing/testing the website locally, you'll need to
# configure the "callback URL" for the GitHub App to be
# `http://localhost:8000/accounts/github/login/callback/`, rather than
# `http://sponsoredissues.org/accounts/github/login/callback/`.
#
# For testing locally, I've found that the best strategy is to create
# a separate GitHub App (e.g. "sponsoredissues.org-test") that you are
# free to configure a different default value of the "callback URL".
# This means that you have will two separate sets of credential values
# (`GITHUB_CLIENT_ID`, `GITHUB_CLIENT_SECRET`, etc.)  -- one for local
# testing and one for the public website.
#
# Note also that you will need to make your local/test GitHub App
# "public" in order for "Sign in with GitHub" to work GitHub accounts
# other than your own (e.g. a second GitHub account that you use for
# testing GitHub Sponsor payments). Otherwise you will get a HTTP 404
# when you try to "Sign in with GitHub".
#
# More explanation about the individual variables:
#
# * `GITHUB_CLIENT_ID` and `GITHUB_CLIENT_SECRET`:
#
#    Required for implementing "Sign-in with GitHub" with
#    `django-allauth`.
#
# * `GITHUB_WEBHOOK_SECRET`:
#
#    CSRF token for authenticating webhook events. You set the value for
#    the webhook secret yourself, in the GitHub App settings.
#
#    Examples of webhook events:
#       - the maintainer closes a GitHub issue
#       - the maintainer adds/removes the `sponsoredissues.org` label from an issue
#
# * `GITHUB_APP_ID` and `GITHUB_APP_PRIVATE_KEY`:
#
#    These credentials are for the sync worker job (i.e. the
#    `manage.py sync_github_issues` command), in order to perform
#    GitHub API requests on behalf of the GitHub App. For example, the
#    `sponsoredissues.org` website needs to know when the open/closed
#    state of an issue has changed, so it can freeze or resume funding
#    accordingly.
#
#    The sync worker job is basically just a fallback in case we miss
#    webhook notifications sent by GitHub. For example, we might miss
#    webhook notification if our website is down, or (less likely)
#    GitHub itself is having technical difficulties and isn't sending
#    the notifications.
#
#    NOTE!: `GITHUB_APP_PRIVATE_KEY` is very picky about syntax. It
#    needs be the exact contents of the `private_key.pem` file,
#    with newlines replaced by '\n' (use single quotes).
GITHUB_CLIENT_ID=
GITHUB_CLIENT_SECRET=
GITHUB_WEBHOOK_SECRET=
GITHUB_APP_ID=
GITHUB_APP_PRIVATE_KEY=

# Restrict GitHub logins to a whitelist of usernames (useful during development).
#
# If this is set, only the specified GitHub usernames will be allowed to log in.
# All other users will see the custom message defined in GITHUB_LOGIN_DISABLED_MESSAGE.
#
# Example: ALLOWED_GITHUB_USERS=myusername,mytestaccount
#
# If this is not set (or empty), all users will be allowed to log in.
ALLOWED_GITHUB_USERS=

# Custom message shown to users who attempt to log in when they are not in
# the ALLOWED_GITHUB_USERS whitelist.
#
# This message will be displayed as an error message after the GitHub OAuth
# flow completes.
GITHUB_LOGIN_DISABLED_MESSAGE='Sorry, logins on sponsoredissues.org are currently disabled, because the site is still under development. Please come back in a few weeks!'
